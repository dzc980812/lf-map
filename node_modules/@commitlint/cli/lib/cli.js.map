{"version":3,"sources":["../src/cli.js"],"names":["pkg","require","flags","color","alias","default","description","type","config","cwd","process","edit","env","extends","help","from","format","quiet","to","version","verbose","cli","name","unknown","arg","Error","main","catch","err","setTimeout","exit","options","raw","input","normalizeFlags","fromStdin","checkFromStdin","range","messages","Array","isArray","filter","message","trim","Boolean","length","checkFromRepository","console","log","loadOpts","file","getSeed","loaded","parserOpts","selectParserOpts","parserPreset","opts","plugins","ignores","defaultIgnores","loadFormatter","commentChar","Promise","all","map","rules","results","Object","keys","originalInput","splice","valid","errors","level","join","warnings","report","reduce","info","result","errorCount","warningCount","push","output","helpUrl","checkFromHistory","checkFromEdit","getEditValue","e","isGitParams","isHuskyParams","warn","GIT_PARAMS","HUSKY_GIT_PARAMS","seed","n","i","undefined","moduleName","formatter","modulePath","resolveFrom","silent","__dirname","resolveGlobal","moduleInstance","on","reason","promise"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport load from '@commitlint/load';\nimport lint from '@commitlint/lint';\nimport read from '@commitlint/read';\nimport meow from 'meow';\nimport {merge, pick, isFunction} from 'lodash';\nimport stdin from 'get-stdin';\nimport resolveFrom from 'resolve-from';\nimport resolveGlobal from 'resolve-global';\n\nimport help from './help';\nconst pkg = require('../package');\n\nconst flags = {\n\tcolor: {\n\t\talias: 'c',\n\t\tdefault: true,\n\t\tdescription: 'toggle colored output',\n\t\ttype: 'boolean'\n\t},\n\tconfig: {\n\t\talias: 'g',\n\t\tdefault: null,\n\t\tdescription: 'path to the config file',\n\t\ttype: 'string'\n\t},\n\tcwd: {\n\t\talias: 'd',\n\t\tdefault: process.cwd(),\n\t\tdescription: 'directory to execute in',\n\t\ttype: 'string'\n\t},\n\tedit: {\n\t\talias: 'e',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'read last commit message from the specified file or fallbacks to ./.git/COMMIT_EDITMSG',\n\t\ttype: 'string'\n\t},\n\tenv: {\n\t\talias: 'E',\n\t\tdefault: null,\n\t\tdescription:\n\t\t\t'check message in the file at path given by environment variable value',\n\t\ttype: 'string'\n\t},\n\textends: {\n\t\talias: 'x',\n\t\tdescription: 'array of shareable configurations to extend',\n\t\ttype: 'string'\n\t},\n\thelp: {\n\t\talias: 'h',\n\t\ttype: 'boolean',\n\t\tdescription: 'display this help message'\n\t},\n\t'help-url': {\n\t\talias: 'H',\n\t\ttype: 'string',\n\t\tdescription: 'helpurl in error message'\n\t},\n\tfrom: {\n\t\talias: 'f',\n\t\tdefault: null,\n\t\tdescription: 'lower end of the commit range to lint; applies if edit=false',\n\t\ttype: 'string'\n\t},\n\tformat: {\n\t\talias: 'o',\n\t\tdefault: null,\n\t\tdescription: 'output format of the results',\n\t\ttype: 'string'\n\t},\n\t'parser-preset': {\n\t\talias: 'p',\n\t\tdescription: 'configuration preset to use for conventional-commits-parser',\n\t\ttype: 'string'\n\t},\n\tquiet: {\n\t\talias: 'q',\n\t\tdefault: false,\n\t\tdescription: 'toggle console output',\n\t\ttype: 'boolean'\n\t},\n\tto: {\n\t\talias: 't',\n\t\tdefault: null,\n\t\tdescription: 'upper end of the commit range to lint; applies if edit=false',\n\t\ttype: 'string'\n\t},\n\tversion: {\n\t\talias: 'v',\n\t\ttype: 'boolean',\n\t\tdescription: 'display version information'\n\t},\n\tverbose: {\n\t\talias: 'V',\n\t\ttype: 'boolean',\n\t\tdescription: 'enable verbose output for reports without problems'\n\t}\n};\n\nconst cli = meow({\n\tdescription: `${pkg.name}@${pkg.version} - ${pkg.description}`,\n\tflags,\n\thelp: `[input] reads from stdin if --edit, --env, --from and --to are omitted\\n${help(\n\t\tflags\n\t)}`,\n\tunknown(arg) {\n\t\tthrow new Error(`unknown flags: ${arg}`);\n\t}\n});\n\nmain(cli).catch(err =>\n\tsetTimeout(() => {\n\t\tif (err.type === pkg.name) {\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tthrow err;\n\t})\n);\n\nasync function main(options) {\n\tconst raw = options.input;\n\tconst flags = normalizeFlags(options.flags);\n\tconst fromStdin = checkFromStdin(raw, flags);\n\n\tconst range = pick(flags, 'edit', 'from', 'to');\n\n\tconst input = await (fromStdin ? stdin() : read(range, {cwd: flags.cwd}));\n\n\tconst messages = (Array.isArray(input) ? input : [input])\n\t\t.filter(message => typeof message === 'string')\n\t\t.filter(message => message.trim() !== '')\n\t\t.filter(Boolean);\n\n\tif (messages.length === 0 && !checkFromRepository(flags)) {\n\t\tconst err = new Error(\n\t\t\t'[input] is required: supply via stdin, or --env or --edit or --from and --to'\n\t\t);\n\t\terr.type = pkg.name;\n\t\tconsole.log(`${cli.help}\\n`);\n\t\tconsole.log(err.message);\n\t\tthrow err;\n\t}\n\n\tconst loadOpts = {cwd: flags.cwd, file: flags.config};\n\tconst loaded = await load(getSeed(flags), loadOpts);\n\tconst parserOpts = selectParserOpts(loaded.parserPreset);\n\tconst opts = {\n\t\tparserOpts: {},\n\t\tplugins: {},\n\t\tignores: [],\n\t\tdefaultIgnores: true\n\t};\n\tif (parserOpts) {\n\t\topts.parserOpts = parserOpts;\n\t}\n\tif (loaded.plugins) {\n\t\topts.plugins = loaded.plugins;\n\t}\n\tif (loaded.ignores) {\n\t\topts.ignores = loaded.ignores;\n\t}\n\tif (loaded.defaultIgnores === false) {\n\t\topts.defaultIgnores = false;\n\t}\n\tconst format = loadFormatter(loaded, flags);\n\n\t// Strip comments if reading from `.git/COMMIT_EDIT_MSG`\n\tif (range.edit) {\n\t\topts.parserOpts.commentChar = '#';\n\t}\n\n\tconst results = await Promise.all(\n\t\tmessages.map(message => lint(message, loaded.rules, opts))\n\t);\n\n\tif (Object.keys(loaded.rules).length === 0) {\n\t\tlet input = '';\n\n\t\tif (results.length !== 0) {\n\t\t\tconst originalInput = results[0].input;\n\t\t\tinput = originalInput;\n\t\t}\n\n\t\tresults.splice(0, results.length, {\n\t\t\tvalid: false,\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tlevel: 2,\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tname: 'empty-rules',\n\t\t\t\t\tmessage: [\n\t\t\t\t\t\t'Please add rules to your `commitlint.config.js`',\n\t\t\t\t\t\t'    - Getting started guide: https://git.io/fhHij',\n\t\t\t\t\t\t'    - Example config: https://git.io/fhHip'\n\t\t\t\t\t].join('\\n')\n\t\t\t\t}\n\t\t\t],\n\t\t\twarnings: [],\n\t\t\tinput\n\t\t});\n\t}\n\n\tconst report = results.reduce(\n\t\t(info, result) => {\n\t\t\tinfo.valid = result.valid ? info.valid : false;\n\t\t\tinfo.errorCount += result.errors.length;\n\t\t\tinfo.warningCount += result.warnings.length;\n\t\t\tinfo.results.push(result);\n\n\t\t\treturn info;\n\t\t},\n\t\t{\n\t\t\tvalid: true,\n\t\t\terrorCount: 0,\n\t\t\twarningCount: 0,\n\t\t\tresults: []\n\t\t}\n\t);\n\n\tconst output = format(report, {\n\t\tcolor: flags.color,\n\t\tverbose: flags.verbose,\n\t\thelpUrl: flags.helpUrl\n\t\t\t? flags.helpUrl.trim()\n\t\t\t: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint'\n\t});\n\n\tif (!flags.quiet && output !== '') {\n\t\tconsole.log(output);\n\t}\n\n\tif (!report.valid) {\n\t\tconst err = new Error(output);\n\t\terr.type = pkg.name;\n\t\tthrow err;\n\t}\n}\n\nfunction checkFromStdin(input, flags) {\n\treturn input.length === 0 && !checkFromRepository(flags);\n}\n\nfunction checkFromRepository(flags) {\n\treturn checkFromHistory(flags) || checkFromEdit(flags);\n}\n\nfunction checkFromEdit(flags) {\n\treturn Boolean(flags.edit) || flags.env;\n}\n\nfunction checkFromHistory(flags) {\n\treturn typeof flags.from === 'string' || typeof flags.to === 'string';\n}\n\nfunction normalizeFlags(flags) {\n\tconst edit = getEditValue(flags);\n\treturn merge({}, flags, {edit, e: edit});\n}\n\nfunction getEditValue(flags) {\n\tif (flags.env) {\n\t\tif (!(flags.env in process.env)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Recieved '${\n\t\t\t\t\tflags.env\n\t\t\t\t}' as value for -E | --env, but environment variable '${\n\t\t\t\t\tflags.env\n\t\t\t\t}' is not available globally`\n\t\t\t);\n\t\t}\n\t\treturn process.env[flags.env];\n\t}\n\tconst {edit} = flags;\n\t// If the edit flag is set but empty (i.e '-e') we default\n\t// to .git/COMMIT_EDITMSG\n\tif (edit === '') {\n\t\treturn true;\n\t}\n\tif (typeof edit === 'boolean') {\n\t\treturn edit;\n\t}\n\t// The recommended method to specify -e with husky was `commitlint -e $HUSKY_GIT_PARAMS`\n\t// This does not work properly with win32 systems, where env variable declarations\n\t// use a different syntax\n\t// See https://github.com/conventional-changelog/commitlint/issues/103 for details\n\t// This has been superceded by the `-E GIT_PARAMS` / `-E HUSKY_GIT_PARAMS`\n\tconst isGitParams = edit === '$GIT_PARAMS' || edit === '%GIT_PARAMS%';\n\tconst isHuskyParams =\n\t\tedit === '$HUSKY_GIT_PARAMS' || edit === '%HUSKY_GIT_PARAMS%';\n\n\tif (isGitParams || isHuskyParams) {\n\t\tconsole.warn(`Using environment variable syntax (${edit}) in -e |\\\n--edit is deprecated. Use '{-E|--env} HUSKY_GIT_PARAMS instead'`);\n\n\t\tif (isGitParams && 'GIT_PARAMS' in process.env) {\n\t\t\treturn process.env.GIT_PARAMS;\n\t\t}\n\t\tif ('HUSKY_GIT_PARAMS' in process.env) {\n\t\t\treturn process.env.HUSKY_GIT_PARAMS;\n\t\t}\n\t\tthrow new Error(\n\t\t\t`Received ${edit} as value for -e | --edit, but GIT_PARAMS or HUSKY_GIT_PARAMS are not available globally.`\n\t\t);\n\t}\n\treturn edit;\n}\n\nfunction getSeed(seed) {\n\tconst e = Array.isArray(seed.extends) ? seed.extends : [seed.extends];\n\tconst n = e.filter(i => typeof i === 'string');\n\treturn n.length > 0\n\t\t? {extends: n, parserPreset: seed.parserPreset}\n\t\t: {parserPreset: seed.parserPreset};\n}\n\nfunction selectParserOpts(parserPreset) {\n\tif (typeof parserPreset !== 'object') {\n\t\treturn undefined;\n\t}\n\n\tif (typeof parserPreset.parserOpts !== 'object') {\n\t\treturn undefined;\n\t}\n\n\treturn parserPreset.parserOpts;\n}\n\nfunction loadFormatter(config, flags) {\n\tconst moduleName = flags.format || config.formatter || '@commitlint/format';\n\tconst modulePath =\n\t\tresolveFrom.silent(__dirname, moduleName) ||\n\t\tresolveFrom.silent(flags.cwd, moduleName) ||\n\t\tresolveGlobal.silent(moduleName);\n\n\tif (modulePath) {\n\t\tconst moduleInstance = require(modulePath);\n\n\t\tif (isFunction(moduleInstance.default)) {\n\t\t\treturn moduleInstance.default;\n\t\t}\n\n\t\treturn moduleInstance;\n\t}\n\n\tthrow new Error(`Using format ${moduleName}, but cannot find the module.`);\n}\n\n// Catch unhandled rejections globally\nprocess.on('unhandledRejection', (reason, promise) => {\n\tconsole.log('Unhandled Rejection at: Promise ', promise, ' reason: ', reason);\n\tthrow reason;\n});\n"],"file":"cli.js"}